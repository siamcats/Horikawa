<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="licenseTextBox.Text" xml:space="preserve">
    <value>License</value>
  </data>
  <data name="alterScaleLabel.Text" xml:space="preserve">
    <value>Alter Scale</value>
  </data>
  <data name="appConfigTextBlock.Text" xml:space="preserve">
    <value>App Config</value>
  </data>
  <data name="aboutAppTextBlock.Text" xml:space="preserve">
    <value>About App</value>
  </data>
  <data name="arabicIndexEnum" xml:space="preserve">
    <value>Arabic</value>
  </data>
  <data name="backgroundTextBlock.Text" xml:space="preserve">
    <value>Background</value>
  </data>
  <data name="barHandEnum" xml:space="preserve">
    <value>Baton</value>
  </data>
  <data name="barIndexEnum" xml:space="preserve">
    <value>Baton</value>
  </data>
  <data name="borderLabel.Text" xml:space="preserve">
    <value>Border</value>
  </data>
  <data name="breguetHandEnum" xml:space="preserve">
    <value>Breguet</value>
  </data>
  <data name="clockConfigTextBlock.Text" xml:space="preserve">
    <value>Clock Config</value>
  </data>
  <data name="clockFaceTitle.Text" xml:space="preserve">
    <value>Dial</value>
  </data>
  <data name="clockHandsTitle.Text" xml:space="preserve">
    <value>Hands</value>
  </data>
  <data name="colorLabel.Text" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="coordinateLabel.Text" xml:space="preserve">
    <value>Coordinate</value>
  </data>
  <data name="countLabel.Text" xml:space="preserve">
    <value>Count</value>
  </data>
  <data name="darkButton.Content" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="dayDateTextBlock.Text" xml:space="preserve">
    <value>Day Date</value>
  </data>
  <data name="defaultButton.Content" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="dauphineHandEnum" xml:space="preserve">
    <value>Dauphine</value>
  </data>
  <data name="fontFamilyLabel.Text" xml:space="preserve">
    <value>Font Family</value>
  </data>
  <data name="fontLabel.Text" xml:space="preserve">
    <value>Font</value>
  </data>
  <data name="fontSizeLabel.Text" xml:space="preserve">
    <value>Font Size</value>
  </data>
  <data name="formatLabel.Text" xml:space="preserve">
    <value>Format</value>
  </data>
  <data name="generalTitle.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="handsLabel.Text" xml:space="preserve">
    <value>Hour / Minute Hands</value>
  </data>
  <data name="imageSelectButton.Content" xml:space="preserve">
    <value>Select Image</value>
  </data>
  <data name="imageToggle.Header" xml:space="preserve">
    <value>Image</value>
  </data>
  <data name="indexLabel.Text" xml:space="preserve">
    <value>Index</value>
  </data>
  <data name="intervalLabel.Text" xml:space="preserve">
    <value>Interval</value>
  </data>
  <data name="languageLabel.Text" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="leafHandEnum" xml:space="preserve">
    <value>Leaf</value>
  </data>
  <data name="lengthLabel.Text" xml:space="preserve">
    <value>Length</value>
  </data>
  <data name="lightButton.Content" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="mechanicalButton.Content" xml:space="preserve">
    <value>Mechanical</value>
  </data>
  <data name="moonPhaseTextBlock.Text" xml:space="preserve">
    <value>Moon Phase</value>
  </data>
  <data name="movementLabel.Text" xml:space="preserve">
    <value>Movement</value>
  </data>
  <data name="presetTextBlock.Text" xml:space="preserve">
    <value>Preset</value>
  </data>
  <data name="quartzButton.Content" xml:space="preserve">
    <value>Quartz</value>
  </data>
  <data name="restartButton.Content" xml:space="preserve">
    <value>Restart App to Apply</value>
  </data>
  <data name="romanIndexEnum" xml:space="preserve">
    <value>Roman</value>
  </data>
  <data name="scaleLabel.Text" xml:space="preserve">
    <value>Scale</value>
  </data>
  <data name="secondHandLabel.Text" xml:space="preserve">
    <value>Second Hand</value>
  </data>
  <data name="sizeLabel.Text" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="templateTitle.Text" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="themeLabel.Text" xml:space="preserve">
    <value>Window Theme</value>
  </data>
  <data name="thicknessLabel.Text" xml:space="preserve">
    <value>Thickness</value>
  </data>
  <data name="typeLabel.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="mysetTextBlock.Text" xml:space="preserve">
    <value>My Templates</value>
  </data>
  <data name="chronographButton.Content" xml:space="preserve">
    <value>Chronograph</value>
  </data>
  <data name="creditsTextBlock.Text" xml:space="preserve">
    <value>Credits</value>
  </data>
  <data name="importTemplateTextBlock.Text" xml:space="preserve">
    <value>Import from template file.</value>
  </data>
  <data name="saveTemplateTextBlock.Text" xml:space="preserve">
    <value>Save current settings.</value>
  </data>
  <data name="saveButton.Content" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="thinHandEnum" xml:space="preserve">
    <value>Stick-Thin</value>
  </data>
  <data name="dialogCannotSaveTemplateSameName" xml:space="preserve">
    <value>Sorry, Chronocci can't save two templates with the same name at the same time.</value>
  </data>
  <data name="dialogCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="dialogCannotSaveTemplate" xml:space="preserve">
    <value>Cannot save template</value>
  </data>
  <data name="dialogCannotSaveTemplateValidate" xml:space="preserve">
    <value>Template name cannot contain any of the following characters: \ / : * ? " &lt; &gt; |</value>
  </data>
  <data name="dialogDelete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="dialogDeleteTemplate" xml:space="preserve">
    <value>Delete template permanently?</value>
  </data>
  <data name="dialogDeleteTemplateReally" xml:space="preserve">
    <value>If you delete this template, you won't be able to recover it. Do you want to delete it?</value>
  </data>
  <data name="openSettingButton.Content" xml:space="preserve">
    <value>Open Settings</value>
  </data>
  <data name="openSettingTextBlock.Text" xml:space="preserve">
    <value>If disabled, change it from the Windows settings panel.</value>
  </data>
  <data name="startUpToggle.Header" xml:space="preserve">
    <value>Startup</value>
  </data>
  <data name="addOnTextBlock.Text" xml:space="preserve">
    <value>Add-On License</value>
  </data>
  <data name="dialogError" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="dialogPurchasedAlready" xml:space="preserve">
    <value>The user has already purchased the product.</value>
  </data>
  <data name="dialogPurchasedCancel" xml:space="preserve">
    <value>The purchase did not complete. The user may have cancelled the purchase.</value>
  </data>
  <data name="dialogPurchasedNetworkError" xml:space="preserve">
    <value>The purchase was unsuccessful due to a network error.</value>
  </data>
  <data name="dialogPurchasedServerError" xml:space="preserve">
    <value>The purchase was unsuccessful due to a server error.</value>
  </data>
  <data name="dialogPurchasedUnknownError" xml:space="preserve">
    <value>The purchase was unsuccessful due to an unknown error.</value>
  </data>
  <data name="dialogRetrieveLicenseError" xml:space="preserve">
    <value>An error occurred while retrieving the license. Add-On is not available.</value>
  </data>
  <data name="licensedTextBlock.Text" xml:space="preserve">
    <value>Licensed</value>
  </data>
  <data name="licenseRequiredTextBlock.Text" xml:space="preserve">
    <value>A license is required.</value>
  </data>
  <data name="versionTextBlock.Text" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="dialogPurchasedSucceeded" xml:space="preserve">
    <value>The purchase was successful.</value>
  </data>
  <data name="dialogRetrieveAddOnError" xml:space="preserve">
    <value>An error occurred while retrieving Add-Ons info. 
You may not be connected to the Internet.</value>
  </data>
  <data name="foregroundTextBlock.Text" xml:space="preserve">
    <value>Foreground</value>
  </data>
  <data name="stretchEnumFill" xml:space="preserve">
    <value>Fill</value>
  </data>
  <data name="stretchEnumNone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="stretchEnumUniform" xml:space="preserve">
    <value>Keep aspect ratio</value>
  </data>
  <data name="stretchEnumUniformToFill" xml:space="preserve">
    <value>Keep aspect ratio and fill</value>
  </data>
  <data name="stretchTextBlock.Text" xml:space="preserve">
    <value>Stretch</value>
  </data>
  <data name="resetButton.Content" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="templateFileExtension" xml:space="preserve">
    <value>Template File</value>
  </data>
  <data name="deleteTextBlock.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="addTextBlock.Text" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="exportTextBlock.Text" xml:space="preserve">
    <value>Export this template.</value>
  </data>
  <data name="inputAuthorTextBox.PlaceholderText" xml:space="preserve">
    <value>Author</value>
  </data>
  <data name="inputDescriptionTextBox.PlaceholderText" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="inputNameTextBox.PlaceholderText" xml:space="preserve">
    <value>Template Name *</value>
  </data>
  <data name="dialogCannotSaveTemplateInvalidFile" xml:space="preserve">
    <value>The template file format or file extension is not valid.</value>
  </data>
  <data name="chronographOmitTextBlock.Text" xml:space="preserve">
    <value>Chrono</value>
  </data>
  <data name="chronographTextBlock.Text" xml:space="preserve">
    <value>Chronograph</value>
  </data>
  <data name="moonPhaseOmitTextBlock.Text" xml:space="preserve">
    <value>Moon</value>
  </data>
</root>